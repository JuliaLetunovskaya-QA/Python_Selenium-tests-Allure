{"name": "test_products_group", "status": "skipped", "statusDetails": {"message": "XFAIL Wait for fix bug\n\nselenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://testqastudio.me?products_group=sale\" class=\"tab-sale \">...</a> is not clickable at point (669, 670). Other element would receive the click: <div class=\"catalog-toolbar-tabs__content\">...</div>\n  (Session info: chrome=114.0.5735.106)\nStacktrace:\n0   chromedriver                        0x0000000100a7ff48 chromedriver + 4226888\n1   chromedriver                        0x0000000100a784f4 chromedriver + 4195572\n2   chromedriver                        0x00000001006bcd68 chromedriver + 281960\n3   chromedriver                        0x00000001006fe6e8 chromedriver + 550632\n4   chromedriver                        0x00000001006fc638 chromedriver + 542264\n5   chromedriver                        0x00000001006fa548 chromedriver + 533832\n6   chromedriver                        0x00000001006f9918 chromedriver + 530712\n7   chromedriver                        0x00000001006edeec chromedriver + 483052\n8   chromedriver                        0x00000001006ed734 chromedriver + 481076\n9   chromedriver                        0x000000010072ec58 chromedriver + 748632\n10  chromedriver                        0x00000001006ebf1c chromedriver + 474908\n11  chromedriver                        0x00000001006ecef4 chromedriver + 478964\n12  chromedriver                        0x0000000100a4159c chromedriver + 3970460\n13  chromedriver                        0x0000000100a456f0 chromedriver + 3987184\n14  chromedriver                        0x0000000100a4b5b4 chromedriver + 4011444\n15  chromedriver                        0x0000000100a462fc chromedriver + 3990268\n16  chromedriver                        0x0000000100a1e1c0 chromedriver + 3826112\n17  chromedriver                        0x0000000100a62088 chromedriver + 4104328\n18  chromedriver                        0x0000000100a621e0 chromedriver + 4104672\n19  chromedriver                        0x0000000100a71f28 chromedriver + 4169512\n20  libsystem_pthread.dylib             0x00000001bb0d426c _pthread_start + 148\n21  libsystem_pthread.dylib             0x00000001bb0cf08c thread_start + 8", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"254bd5f72a59a6fb5a3e7e9bde9a12de\")>\n\n>   ???\n\n/Users/julia/Downloads/selenium.qa.studio-main 2/tests/test_shop.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1048b56d0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...0001bb0d426c _pthread_start + 148\\\\n21  libsystem_pthread.dylib             0x00000001bb0cf08c thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://testqastudio.me?products_group=sale\" class=\"tab-sale \">...</a> is not clickable at point (669, 670). Other element would receive the click: <div class=\"catalog-toolbar-tabs__content\">...</div>\nE         (Session info: chrome=114.0.5735.106)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000100a7ff48 chromedriver + 4226888\nE       1   chromedriver                        0x0000000100a784f4 chromedriver + 4195572\nE       2   chromedriver                        0x00000001006bcd68 chromedriver + 281960\nE       3   chromedriver                        0x00000001006fe6e8 chromedriver + 550632\nE       4   chromedriver                        0x00000001006fc638 chromedriver + 542264\nE       5   chromedriver                        0x00000001006fa548 chromedriver + 533832\nE       6   chromedriver                        0x00000001006f9918 chromedriver + 530712\nE       7   chromedriver                        0x00000001006edeec chromedriver + 483052\nE       8   chromedriver                        0x00000001006ed734 chromedriver + 481076\nE       9   chromedriver                        0x000000010072ec58 chromedriver + 748632\nE       10  chromedriver                        0x00000001006ebf1c chromedriver + 474908\nE       11  chromedriver                        0x00000001006ecef4 chromedriver + 478964\nE       12  chromedriver                        0x0000000100a4159c chromedriver + 3970460\nE       13  chromedriver                        0x0000000100a456f0 chromedriver + 3987184\nE       14  chromedriver                        0x0000000100a4b5b4 chromedriver + 4011444\nE       15  chromedriver                        0x0000000100a462fc chromedriver + 3990268\nE       16  chromedriver                        0x0000000100a1e1c0 chromedriver + 3826112\nE       17  chromedriver                        0x0000000100a62088 chromedriver + 4104328\nE       18  chromedriver                        0x0000000100a621e0 chromedriver + 4104672\nE       19  chromedriver                        0x0000000100a71f28 chromedriver + 4169512\nE       20  libsystem_pthread.dylib             0x00000001bb0d426c _pthread_start + 148\nE       21  libsystem_pthread.dylib             0x00000001bb0cf08c thread_start + 8\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: ElementClickInterceptedException"}, "description": "\n    Test case TC-2\n    ", "start": 1686763629942, "stop": 1686763635811, "uuid": "27ee03f8-ac0b-4116-b713-b4bcfc8b89f6", "historyId": "4fdd6adba16e950b161eae73ef4ccb14", "testCaseId": "4fdd6adba16e950b161eae73ef4ccb14", "fullName": "tests.test_shop#test_products_group", "labels": [{"name": "tag", "value": "@pytest.mark.xfail(reason='Wait for fix bug')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_shop"}, {"name": "host", "value": "MacBook-Air-Julia.local"}, {"name": "thread", "value": "39103-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_shop"}]}